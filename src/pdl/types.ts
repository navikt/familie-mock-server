/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
    hentPerson?: GQLPerson;
    hentPersonBolk: Array<GQLHentPersonBolkResult>;
    hentIdenter?: GQLIdentliste;
    hentIdenterBolk: Array<GQLHentIdenterBolkResult>;
    hentGeografiskTilknytning?: GQLGeografiskTilknytning;
    sokPerson?: GQLPersonSearchResult;
    sokAdresse?: GQLAdresseSearchResult;
    forslagAdresse?: GQLAdresseCompletionResult;
}

export interface GQLPerson {
    adressebeskyttelse: Array<GQLAdressebeskyttelse>;
    bostedsadresse: Array<GQLBostedsadresse>;
    deltBosted: Array<GQLDeltBosted>;
    doedfoedtBarn: Array<GQLDoedfoedtBarn>;
    doedsfall: Array<GQLDoedsfall>;
    falskIdentitet?: GQLFalskIdentitet;

    /**
     *
     * @deprecated Opplysningen Familierelasjon har byttet navn til ForelderBarnRelasjon. Mer informasjon i dokumentasjonen. Familierelasjoner vil bli fjernet fra PDL 1. september 2021.
     */
    familierelasjoner: Array<GQLFamilierelasjon>;
    foedsel: Array<GQLFoedsel>;
    foedselsdato: Array<GQLFoedselsdato>;
    folkeregisteridentifikator: Array<GQLFolkeregisteridentifikator>;
    folkeregisterpersonstatus: Array<GQLFolkeregisterpersonstatus>;
    forelderBarnRelasjon: Array<GQLForelderBarnRelasjon>;
    foreldreansvar: Array<GQLForeldreansvar>;
    fullmakt: Array<GQLFullmakt>;
    identitetsgrunnlag: Array<GQLIdentitetsgrunnlag>;
    kjoenn: Array<GQLKjoenn>;
    kontaktadresse: Array<GQLKontaktadresse>;
    kontaktinformasjonForDoedsbo: Array<GQLKontaktinformasjonForDoedsbo>;
    navn: Array<GQLNavn>;
    opphold: Array<GQLOpphold>;
    oppholdsadresse: Array<GQLOppholdsadresse>;
    sikkerhetstiltak: Array<GQLSikkerhetstiltak>;
    sivilstand: Array<GQLSivilstand>;
    statsborgerskap: Array<GQLStatsborgerskap>;
    telefonnummer: Array<GQLTelefonnummer>;
    tilrettelagtKommunikasjon: Array<GQLTilrettelagtKommunikasjon>;
    utenlandskIdentifikasjonsnummer: Array<GQLUtenlandskIdentifikasjonsnummer>;
    innflyttingTilNorge: Array<GQLInnflyttingTilNorge>;
    utflyttingFraNorge: Array<GQLUtflyttingFraNorge>;
    vergemaalEllerFremtidsfullmakt: Array<GQLVergemaalEllerFremtidsfullmakt>;
}

export interface GQLAdressebeskyttelse {
    gradering: GQLAdressebeskyttelseGradering;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLAdressebeskyttelseGradering {
    STRENGT_FORTROLIG_UTLAND = 'STRENGT_FORTROLIG_UTLAND',
    STRENGT_FORTROLIG = 'STRENGT_FORTROLIG',
    FORTROLIG = 'FORTROLIG',
    UGRADERT = 'UGRADERT',
}

export interface GQLFolkeregistermetadata {
    ajourholdstidspunkt?: GQLDateTime;
    gyldighetstidspunkt?: GQLDateTime;
    opphoerstidspunkt?: GQLDateTime;
    kilde?: string;
    aarsak?: string;
    sekvens?: number;
}

export type GQLDateTime = any;

export interface GQLMetadata {
    opplysningsId?: string;
    master: string;
    endringer: Array<GQLEndring>;
    historisk: boolean;
}

export interface GQLEndring {
    type: GQLEndringstype;
    registrert: GQLDateTime;
    registrertAv: string;
    systemkilde: string;
    kilde: string;
}

export enum GQLEndringstype {
    OPPRETT = 'OPPRETT',
    KORRIGER = 'KORRIGER',
    OPPHOER = 'OPPHOER',
}

export interface GQLBostedsadresse {
    angittFlyttedato?: GQLDate;
    gyldigFraOgMed?: GQLDateTime;
    gyldigTilOgMed?: GQLDateTime;
    coAdressenavn?: string;
    vegadresse?: GQLVegadresse;
    matrikkeladresse?: GQLMatrikkeladresse;
    utenlandskAdresse?: GQLUtenlandskAdresse;
    ukjentBosted?: GQLUkjentBosted;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export type GQLDate = any;

export interface GQLVegadresse {
    matrikkelId?: GQLLong;
    husnummer?: string;
    husbokstav?: string;
    bruksenhetsnummer?: string;
    adressenavn?: string;
    kommunenummer?: string;
    bydelsnummer?: string;
    tilleggsnavn?: string;
    postnummer?: string;
    koordinater?: GQLKoordinater;
}

export type GQLLong = any;

export interface GQLKoordinater {
    x?: number;
    y?: number;
    z?: number;
    kvalitet?: number;
}

export interface GQLMatrikkeladresse {
    matrikkelId?: GQLLong;
    bruksenhetsnummer?: string;
    tilleggsnavn?: string;
    postnummer?: string;
    kommunenummer?: string;
    koordinater?: GQLKoordinater;
}

export interface GQLUtenlandskAdresse {
    adressenavnNummer?: string;
    bygningEtasjeLeilighet?: string;
    postboksNummerNavn?: string;
    postkode?: string;
    bySted?: string;
    regionDistriktOmraade?: string;
    landkode: string;
}

export interface GQLUkjentBosted {
    bostedskommune?: string;
}

export interface GQLDeltBosted {
    startdatoForKontrakt: GQLDate;
    sluttdatoForKontrakt?: GQLDate;
    coAdressenavn?: string;
    vegadresse?: GQLVegadresse;
    matrikkeladresse?: GQLMatrikkeladresse;
    utenlandskAdresse?: GQLUtenlandskAdresse;
    ukjentBosted?: GQLUkjentBosted;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLDoedfoedtBarn {
    dato?: GQLDate;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLDoedsfall {
    doedsdato?: GQLDate;
    metadata: GQLMetadata;
    folkeregistermetadata?: GQLFolkeregistermetadata;
}

export interface GQLFalskIdentitet {
    erFalsk: boolean;
    rettIdentitetVedIdentifikasjonsnummer?: string;
    rettIdentitetErUkjent?: boolean;
    rettIdentitetVedOpplysninger?: GQLFalskIdentitetIdentifiserendeInformasjon;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLFalskIdentitetIdentifiserendeInformasjon {
    personnavn: GQLPersonnavn;
    foedselsdato?: GQLDate;
    statsborgerskap: Array<string>;
    kjoenn?: GQLKjoennType;
}

export interface GQLPersonnavn {
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
}

export enum GQLKjoennType {
    MANN = 'MANN',
    KVINNE = 'KVINNE',
    UKJENT = 'UKJENT',
}

export interface GQLFamilierelasjon {
    relatertPersonsIdent: string;
    relatertPersonsRolle: GQLFamilierelasjonsrolle;
    minRolleForPerson?: GQLFamilierelasjonsrolle;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLFamilierelasjonsrolle {
    BARN = 'BARN',
    MOR = 'MOR',
    FAR = 'FAR',
    MEDMOR = 'MEDMOR',
}

export interface GQLFoedsel {
    foedselsaar?: number;
    foedselsdato?: GQLDate;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLFoedselsdato {
    foedselsaar?: number;
    foedselsdato?: GQLDate;
    foedeland?: string;
    foedested?: string;
    foedekommune?: string;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLFolkeregisteridentifikator {
    identifikasjonsnummer: string;
    status: string;
    type: string;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata?: GQLMetadata;
}

export interface GQLFolkeregisterpersonstatus {
    status: string;
    forenkletStatus: string;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLForelderBarnRelasjon {
    relatertPersonsIdent: string;
    relatertPersonsRolle: GQLForelderBarnRelasjonRolle;
    minRolleForPerson?: GQLForelderBarnRelasjonRolle;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLForelderBarnRelasjonRolle {
    BARN = 'BARN',
    MOR = 'MOR',
    FAR = 'FAR',
    MEDMOR = 'MEDMOR',
}

export interface GQLForeldreansvar {
    ansvar?: string;
    ansvarlig?: string;
    ansvarssubjekt?: string;
    ansvarligUtenIdentifikator?: GQLRelatertBiPerson;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLRelatertBiPerson {
    navn?: GQLPersonnavn;
    foedselsdato?: GQLDate;
    statsborgerskap?: string;
    kjoenn?: GQLKjoennType;
}

export interface GQLFullmakt {
    motpartsPersonident: string;
    motpartsRolle: GQLFullmaktsRolle;
    omraader: Array<string>;
    gyldigFraOgMed: GQLDate;
    gyldigTilOgMed: GQLDate;
    metadata: GQLMetadata;
}

export enum GQLFullmaktsRolle {
    FULLMAKTSGIVER = 'FULLMAKTSGIVER',
    FULLMEKTIG = 'FULLMEKTIG',
}

export interface GQLIdentitetsgrunnlag {
    status: GQLIdentitetsgrunnlagsstatus;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLIdentitetsgrunnlagsstatus {
    IKKE_KONTROLLERT = 'IKKE_KONTROLLERT',
    KONTROLLERT = 'KONTROLLERT',
    INGEN_STATUS = 'INGEN_STATUS',
}

export interface GQLKjoenn {
    kjoenn?: GQLKjoennType;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLKontaktadresse {
    gyldigFraOgMed?: GQLDateTime;
    gyldigTilOgMed?: GQLDateTime;
    type: GQLKontaktadresseType;
    coAdressenavn?: string;
    postboksadresse?: GQLPostboksadresse;
    vegadresse?: GQLVegadresse;
    postadresseIFrittFormat?: GQLPostadresseIFrittFormat;
    utenlandskAdresse?: GQLUtenlandskAdresse;
    utenlandskAdresseIFrittFormat?: GQLUtenlandskAdresseIFrittFormat;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLKontaktadresseType {
    Innland = 'Innland',
    Utland = 'Utland',
}

export interface GQLPostboksadresse {
    postbokseier?: string;
    postboks: string;
    postnummer?: string;
}

export interface GQLPostadresseIFrittFormat {
    adresselinje1?: string;
    adresselinje2?: string;
    adresselinje3?: string;
    postnummer?: string;
}

export interface GQLUtenlandskAdresseIFrittFormat {
    adresselinje1?: string;
    adresselinje2?: string;
    adresselinje3?: string;
    postkode?: string;
    byEllerStedsnavn?: string;
    landkode: string;
}

export interface GQLKontaktinformasjonForDoedsbo {
    skifteform: GQLKontaktinformasjonForDoedsboSkifteform;
    attestutstedelsesdato: GQLDate;
    personSomKontakt?: GQLKontaktinformasjonForDoedsboPersonSomKontakt;
    advokatSomKontakt?: GQLKontaktinformasjonForDoedsboAdvokatSomKontakt;
    organisasjonSomKontakt?: GQLKontaktinformasjonForDoedsboOrganisasjonSomKontakt;
    adresse: GQLKontaktinformasjonForDoedsboAdresse;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLKontaktinformasjonForDoedsboSkifteform {
    OFFENTLIG = 'OFFENTLIG',
    ANNET = 'ANNET',
}

export interface GQLKontaktinformasjonForDoedsboPersonSomKontakt {
    foedselsdato?: GQLDate;
    personnavn?: GQLPersonnavn;
    identifikasjonsnummer?: string;
}

export interface GQLKontaktinformasjonForDoedsboAdvokatSomKontakt {
    personnavn: GQLPersonnavn;
    organisasjonsnavn?: string;
    organisasjonsnummer?: string;
}

export interface GQLKontaktinformasjonForDoedsboOrganisasjonSomKontakt {
    kontaktperson?: GQLPersonnavn;
    organisasjonsnavn: string;
    organisasjonsnummer?: string;
}

export interface GQLKontaktinformasjonForDoedsboAdresse {
    adresselinje1: string;
    adresselinje2?: string;
    poststedsnavn: string;
    postnummer: string;
    landkode?: string;
}

export interface GQLNavn {
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
    forkortetNavn?: string;
    originaltNavn?: GQLOriginaltNavn;
    gyldigFraOgMed?: GQLDate;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLOriginaltNavn {
    fornavn?: string;
    mellomnavn?: string;
    etternavn?: string;
}

export interface GQLOpphold {
    type: GQLOppholdstillatelse;
    oppholdFra?: GQLDate;
    oppholdTil?: GQLDate;
    folkeregistermetadata: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLOppholdstillatelse {
    MIDLERTIDIG = 'MIDLERTIDIG',
    PERMANENT = 'PERMANENT',
    OPPLYSNING_MANGLER = 'OPPLYSNING_MANGLER',
}

export interface GQLOppholdsadresse {
    gyldigFraOgMed?: GQLDateTime;
    gyldigTilOgMed?: GQLDateTime;
    coAdressenavn?: string;
    utenlandskAdresse?: GQLUtenlandskAdresse;
    vegadresse?: GQLVegadresse;
    matrikkeladresse?: GQLMatrikkeladresse;
    oppholdAnnetSted?: string;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLSikkerhetstiltak {
    tiltakstype: string;
    beskrivelse: string;
    kontaktperson?: GQLSikkerhetstiltakKontaktperson;
    gyldigFraOgMed: GQLDate;
    gyldigTilOgMed: GQLDate;
    metadata: GQLMetadata;
}

export interface GQLSikkerhetstiltakKontaktperson {
    personident: string;
    enhet: string;
}

export interface GQLSivilstand {
    type: GQLSivilstandstype;
    gyldigFraOgMed?: GQLDate;
    relatertVedSivilstand?: string;
    bekreftelsesdato?: GQLDate;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export enum GQLSivilstandstype {
    UOPPGITT = 'UOPPGITT',
    UGIFT = 'UGIFT',
    GIFT = 'GIFT',
    ENKE_ELLER_ENKEMANN = 'ENKE_ELLER_ENKEMANN',
    SKILT = 'SKILT',
    SEPARERT = 'SEPARERT',
    REGISTRERT_PARTNER = 'REGISTRERT_PARTNER',
    SEPARERT_PARTNER = 'SEPARERT_PARTNER',
    SKILT_PARTNER = 'SKILT_PARTNER',
    GJENLEVENDE_PARTNER = 'GJENLEVENDE_PARTNER',
}

export interface GQLStatsborgerskap {
    land: string;
    bekreftelsesdato?: GQLDate;
    gyldigFraOgMed?: GQLDate;
    gyldigTilOgMed?: GQLDate;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLTelefonnummer {
    landskode: string;
    nummer: string;
    prioritet: number;
    metadata: GQLMetadata;
}

export interface GQLTilrettelagtKommunikasjon {
    talespraaktolk?: GQLTolk;
    tegnspraaktolk?: GQLTolk;
    metadata: GQLMetadata;
}

export interface GQLTolk {
    spraak?: string;
}

export interface GQLUtenlandskIdentifikasjonsnummer {
    identifikasjonsnummer: string;
    utstederland: string;
    opphoert: boolean;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLInnflyttingTilNorge {
    fraflyttingsland?: string;
    fraflyttingsstedIUtlandet?: string;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLUtflyttingFraNorge {
    tilflyttingsland?: string;
    tilflyttingsstedIUtlandet?: string;
    utflyttingsdato?: GQLDate;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLVergemaalEllerFremtidsfullmakt {
    type?: string;
    embete?: string;
    vergeEllerFullmektig: GQLVergeEllerFullmektig;
    folkeregistermetadata?: GQLFolkeregistermetadata;
    metadata: GQLMetadata;
}

export interface GQLVergeEllerFullmektig {
    navn?: GQLPersonnavn;
    motpartsPersonident?: string;
    omfang?: string;
    omfangetErInnenPersonligOmraade: boolean;
}

export interface GQLHentPersonBolkResult {
    ident: string;
    person?: GQLPerson;
    code: string;
}

export enum GQLIdentGruppe {
    AKTORID = 'AKTORID',
    FOLKEREGISTERIDENT = 'FOLKEREGISTERIDENT',
    NPID = 'NPID',
}

export interface GQLIdentliste {
    identer: Array<GQLIdentInformasjon>;
}

export interface GQLIdentInformasjon {
    ident: string;
    gruppe: GQLIdentGruppe;
    historisk: boolean;
}

export interface GQLHentIdenterBolkResult {
    ident: string;
    identer?: Array<GQLIdentInformasjon>;
    code: string;
}

export interface GQLGeografiskTilknytning {
    gtType: GQLGtType;
    gtKommune?: string;
    gtBydel?: string;
    gtLand?: string;
    regel: string;
}

export enum GQLGtType {
    KOMMUNE = 'KOMMUNE',
    BYDEL = 'BYDEL',
    UTLAND = 'UTLAND',
    UDEFINERT = 'UDEFINERT',
}

export interface GQLCriterion {
    fieldName: string;
    searchRule: GQLSearchRule;
    searchHistorical?: boolean;
}

export interface GQLSearchRule {
    exists?: string;
    notEquals?: string;
    equals?: string;
    contains?: string;
    fuzzy?: string;
    random?: string;
    wildcard?: string;
    startsWith?: string;
    regex?: string;
    after?: string;
    before?: string;
    lessThan?: string;
    greaterThan?: string;
    from?: string;
    to?: string;
    fromExcluding?: string;
    toExcluding?: string;
    caseSensitive?: boolean;
    disablePhonetic?: boolean;
    boost?: number;
}

export interface GQLPaging {
    pageNumber?: number;
    resultsPerPage?: number;
    sortBy?: Array<GQLSearchSorting | null>;
}

export interface GQLSearchSorting {
    fieldName: string;
    direction: GQLDirection;
}

export enum GQLDirection {
    ASC = 'ASC',
    DESC = 'DESC',
}

export interface GQLPersonSearchResult {
    hits: Array<GQLPersonSearchHit>;
    pageNumber?: number;
    totalPages?: number;
    totalHits?: number;
}

export interface GQLPersonSearchHit {
    person?: GQLPerson;
    identer: Array<GQLIdentInformasjon>;
    score?: number;
    highlights?: Array<GQLPersonSearchHighlight | null>;
}

export interface GQLPersonSearchHighlight {
    opplysning?: string;
    opplysningsId?: string;
    historisk?: boolean;
    matches?: Array<GQLSearchMatch | null>;
}

export interface GQLSearchMatch {
    field: string;
    type?: string;
    fragments?: Array<string | null>;
}

export interface GQLAdresseSearchResult {
    hits: Array<GQLAdresseSearchHit>;
    pageNumber?: number;
    totalPages?: number;
    totalHits?: number;
}

export interface GQLAdresseSearchHit {
    vegadresse?: GQLVegadresseResult;
    matrikkeladresse?: GQLMatrikkeladresseResult;
    score?: number;
}

export interface GQLVegadresseResult {
    matrikkelId?: string;
    husnummer?: number;
    husbokstav?: string;
    adressenavn?: string;
    adressekode?: string;
    tilleggsnavn?: string;
    fylkesnavn?: string;
    fylkesnummer?: string;
    kommunenavn?: string;
    kommunenummer?: string;
    postnummer?: string;
    poststed?: string;
    bydelsnavn?: string;
    bydelsnummer?: string;
}

export interface GQLMatrikkeladresseResult {
    matrikkelId?: string;
    tilleggsnavn?: string;
    kommunenummer?: string;
    gaardsnummer?: string;
    bruksnummer?: string;
    postnummer?: string;
    poststed?: string;
}

export interface GQLCompletionParameters {
    completionField: string;
    maxSuggestions?: number;
    fieldValues: Array<GQLCompletionFieldValue | null>;
}

export interface GQLCompletionFieldValue {
    fieldName: string;
    fieldValue?: string;
}

export interface GQLAdresseCompletionResult {
    suggestions: Array<string>;
    addressFound?: GQLCompletionAdresse;
}

export interface GQLCompletionAdresse {
    vegadresse?: GQLVegadresseResult;
    matrikkeladresse?: GQLMatrikkeladresseResult;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
    Query?: GQLQueryTypeResolver;
    Person?: GQLPersonTypeResolver;
    Adressebeskyttelse?: GQLAdressebeskyttelseTypeResolver;
    Folkeregistermetadata?: GQLFolkeregistermetadataTypeResolver;
    DateTime?: GraphQLScalarType;
    Metadata?: GQLMetadataTypeResolver;
    Endring?: GQLEndringTypeResolver;
    Bostedsadresse?: GQLBostedsadresseTypeResolver;
    Date?: GraphQLScalarType;
    Vegadresse?: GQLVegadresseTypeResolver;
    Long?: GraphQLScalarType;
    Koordinater?: GQLKoordinaterTypeResolver;
    Matrikkeladresse?: GQLMatrikkeladresseTypeResolver;
    UtenlandskAdresse?: GQLUtenlandskAdresseTypeResolver;
    UkjentBosted?: GQLUkjentBostedTypeResolver;
    DeltBosted?: GQLDeltBostedTypeResolver;
    DoedfoedtBarn?: GQLDoedfoedtBarnTypeResolver;
    Doedsfall?: GQLDoedsfallTypeResolver;
    FalskIdentitet?: GQLFalskIdentitetTypeResolver;
    FalskIdentitetIdentifiserendeInformasjon?: GQLFalskIdentitetIdentifiserendeInformasjonTypeResolver;
    Personnavn?: GQLPersonnavnTypeResolver;
    Familierelasjon?: GQLFamilierelasjonTypeResolver;
    Foedsel?: GQLFoedselTypeResolver;
    Folkeregisteridentifikator?: GQLFolkeregisteridentifikatorTypeResolver;
    Folkeregisterpersonstatus?: GQLFolkeregisterpersonstatusTypeResolver;
    ForelderBarnRelasjon?: GQLForelderBarnRelasjonTypeResolver;
    Foreldreansvar?: GQLForeldreansvarTypeResolver;
    RelatertBiPerson?: GQLRelatertBiPersonTypeResolver;
    Fullmakt?: GQLFullmaktTypeResolver;
    Identitetsgrunnlag?: GQLIdentitetsgrunnlagTypeResolver;
    Kjoenn?: GQLKjoennTypeResolver;
    Kontaktadresse?: GQLKontaktadresseTypeResolver;
    Postboksadresse?: GQLPostboksadresseTypeResolver;
    PostadresseIFrittFormat?: GQLPostadresseIFrittFormatTypeResolver;
    UtenlandskAdresseIFrittFormat?: GQLUtenlandskAdresseIFrittFormatTypeResolver;
    KontaktinformasjonForDoedsbo?: GQLKontaktinformasjonForDoedsboTypeResolver;
    KontaktinformasjonForDoedsboPersonSomKontakt?: GQLKontaktinformasjonForDoedsboPersonSomKontaktTypeResolver;
    KontaktinformasjonForDoedsboAdvokatSomKontakt?: GQLKontaktinformasjonForDoedsboAdvokatSomKontaktTypeResolver;
    KontaktinformasjonForDoedsboOrganisasjonSomKontakt?: GQLKontaktinformasjonForDoedsboOrganisasjonSomKontaktTypeResolver;
    KontaktinformasjonForDoedsboAdresse?: GQLKontaktinformasjonForDoedsboAdresseTypeResolver;
    Navn?: GQLNavnTypeResolver;
    OriginaltNavn?: GQLOriginaltNavnTypeResolver;
    Opphold?: GQLOppholdTypeResolver;
    Oppholdsadresse?: GQLOppholdsadresseTypeResolver;
    Sikkerhetstiltak?: GQLSikkerhetstiltakTypeResolver;
    SikkerhetstiltakKontaktperson?: GQLSikkerhetstiltakKontaktpersonTypeResolver;
    Sivilstand?: GQLSivilstandTypeResolver;
    Statsborgerskap?: GQLStatsborgerskapTypeResolver;
    Telefonnummer?: GQLTelefonnummerTypeResolver;
    TilrettelagtKommunikasjon?: GQLTilrettelagtKommunikasjonTypeResolver;
    Tolk?: GQLTolkTypeResolver;
    UtenlandskIdentifikasjonsnummer?: GQLUtenlandskIdentifikasjonsnummerTypeResolver;
    InnflyttingTilNorge?: GQLInnflyttingTilNorgeTypeResolver;
    UtflyttingFraNorge?: GQLUtflyttingFraNorgeTypeResolver;
    VergemaalEllerFremtidsfullmakt?: GQLVergemaalEllerFremtidsfullmaktTypeResolver;
    VergeEllerFullmektig?: GQLVergeEllerFullmektigTypeResolver;
    HentPersonBolkResult?: GQLHentPersonBolkResultTypeResolver;
    Identliste?: GQLIdentlisteTypeResolver;
    IdentInformasjon?: GQLIdentInformasjonTypeResolver;
    HentIdenterBolkResult?: GQLHentIdenterBolkResultTypeResolver;
    GeografiskTilknytning?: GQLGeografiskTilknytningTypeResolver;
    PersonSearchResult?: GQLPersonSearchResultTypeResolver;
    PersonSearchHit?: GQLPersonSearchHitTypeResolver;
    PersonSearchHighlight?: GQLPersonSearchHighlightTypeResolver;
    SearchMatch?: GQLSearchMatchTypeResolver;
    AdresseSearchResult?: GQLAdresseSearchResultTypeResolver;
    AdresseSearchHit?: GQLAdresseSearchHitTypeResolver;
    VegadresseResult?: GQLVegadresseResultTypeResolver;
    MatrikkeladresseResult?: GQLMatrikkeladresseResultTypeResolver;
    AdresseCompletionResult?: GQLAdresseCompletionResultTypeResolver;
    CompletionAdresse?: GQLCompletionAdresseTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
    hentPerson?: QueryToHentPersonResolver<TParent>;
    hentPersonBolk?: QueryToHentPersonBolkResolver<TParent>;
    hentIdenter?: QueryToHentIdenterResolver<TParent>;
    hentIdenterBolk?: QueryToHentIdenterBolkResolver<TParent>;
    hentGeografiskTilknytning?: QueryToHentGeografiskTilknytningResolver<TParent>;
    sokPerson?: QueryToSokPersonResolver<TParent>;
    sokAdresse?: QueryToSokAdresseResolver<TParent>;
    forslagAdresse?: QueryToForslagAdresseResolver<TParent>;
}

export interface QueryToHentPersonArgs {
    ident: string;
}
export interface QueryToHentPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToHentPersonArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToHentPersonBolkArgs {
    identer: Array<string>;
}
export interface QueryToHentPersonBolkResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: QueryToHentPersonBolkArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface QueryToHentIdenterArgs {
    ident: string;
    grupper?: Array<GQLIdentGruppe>;
    historikk?: boolean;
}
export interface QueryToHentIdenterResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: QueryToHentIdenterArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface QueryToHentIdenterBolkArgs {
    identer: Array<string>;
    grupper?: Array<GQLIdentGruppe>;
    historikk?: boolean;
}
export interface QueryToHentIdenterBolkResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: QueryToHentIdenterBolkArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface QueryToHentGeografiskTilknytningArgs {
    ident: string;
}
export interface QueryToHentGeografiskTilknytningResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: QueryToHentGeografiskTilknytningArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface QueryToSokPersonArgs {
    criteria?: Array<GQLCriterion | null>;
    paging?: GQLPaging;
}
export interface QueryToSokPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSokPersonArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSokAdresseArgs {
    criteria?: Array<GQLCriterion | null>;
    paging?: GQLPaging;
}
export interface QueryToSokAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSokAdresseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToForslagAdresseArgs {
    parameters?: GQLCompletionParameters;
}
export interface QueryToForslagAdresseResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: QueryToForslagAdresseArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface GQLPersonTypeResolver<TParent = any> {
    adressebeskyttelse?: PersonToAdressebeskyttelseResolver<TParent>;
    bostedsadresse?: PersonToBostedsadresseResolver<TParent>;
    deltBosted?: PersonToDeltBostedResolver<TParent>;
    doedfoedtBarn?: PersonToDoedfoedtBarnResolver<TParent>;
    doedsfall?: PersonToDoedsfallResolver<TParent>;
    falskIdentitet?: PersonToFalskIdentitetResolver<TParent>;
    familierelasjoner?: PersonToFamilierelasjonerResolver<TParent>;
    foedsel?: PersonToFoedselResolver<TParent>;
    folkeregisteridentifikator?: PersonToFolkeregisteridentifikatorResolver<TParent>;
    folkeregisterpersonstatus?: PersonToFolkeregisterpersonstatusResolver<TParent>;
    forelderBarnRelasjon?: PersonToForelderBarnRelasjonResolver<TParent>;
    foreldreansvar?: PersonToForeldreansvarResolver<TParent>;
    fullmakt?: PersonToFullmaktResolver<TParent>;
    identitetsgrunnlag?: PersonToIdentitetsgrunnlagResolver<TParent>;
    kjoenn?: PersonToKjoennResolver<TParent>;
    kontaktadresse?: PersonToKontaktadresseResolver<TParent>;
    kontaktinformasjonForDoedsbo?: PersonToKontaktinformasjonForDoedsboResolver<TParent>;
    navn?: PersonToNavnResolver<TParent>;
    opphold?: PersonToOppholdResolver<TParent>;
    oppholdsadresse?: PersonToOppholdsadresseResolver<TParent>;
    sikkerhetstiltak?: PersonToSikkerhetstiltakResolver<TParent>;
    sivilstand?: PersonToSivilstandResolver<TParent>;
    statsborgerskap?: PersonToStatsborgerskapResolver<TParent>;
    telefonnummer?: PersonToTelefonnummerResolver<TParent>;
    tilrettelagtKommunikasjon?: PersonToTilrettelagtKommunikasjonResolver<TParent>;
    utenlandskIdentifikasjonsnummer?: PersonToUtenlandskIdentifikasjonsnummerResolver<TParent>;
    innflyttingTilNorge?: PersonToInnflyttingTilNorgeResolver<TParent>;
    utflyttingFraNorge?: PersonToUtflyttingFraNorgeResolver<TParent>;
    vergemaalEllerFremtidsfullmakt?: PersonToVergemaalEllerFremtidsfullmaktResolver<TParent>;
}

export interface PersonToAdressebeskyttelseArgs {
    historikk?: boolean;
}
export interface PersonToAdressebeskyttelseResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToAdressebeskyttelseArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToBostedsadresseArgs {
    historikk?: boolean;
}
export interface PersonToBostedsadresseResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToBostedsadresseArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToDeltBostedArgs {
    historikk?: boolean;
}
export interface PersonToDeltBostedResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToDeltBostedArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToDoedfoedtBarnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToDoedsfallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToFalskIdentitetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToFamilierelasjonerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToFoedselResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToFolkeregisteridentifikatorArgs {
    historikk?: boolean;
}
export interface PersonToFolkeregisteridentifikatorResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToFolkeregisteridentifikatorArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToFolkeregisterpersonstatusArgs {
    historikk?: boolean;
}
export interface PersonToFolkeregisterpersonstatusResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToFolkeregisterpersonstatusArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToForelderBarnRelasjonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToForeldreansvarArgs {
    historikk?: boolean;
}
export interface PersonToForeldreansvarResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToForeldreansvarArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToFullmaktArgs {
    historikk?: boolean;
}
export interface PersonToFullmaktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PersonToFullmaktArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToIdentitetsgrunnlagArgs {
    historikk?: boolean;
}
export interface PersonToIdentitetsgrunnlagResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToIdentitetsgrunnlagArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToKjoennArgs {
    historikk?: boolean;
}
export interface PersonToKjoennResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PersonToKjoennArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToKontaktadresseArgs {
    historikk?: boolean;
}
export interface PersonToKontaktadresseResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToKontaktadresseArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToKontaktinformasjonForDoedsboArgs {
    historikk?: boolean;
}
export interface PersonToKontaktinformasjonForDoedsboResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToKontaktinformasjonForDoedsboArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToNavnArgs {
    historikk?: boolean;
}
export interface PersonToNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PersonToNavnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToOppholdArgs {
    historikk?: boolean;
}
export interface PersonToOppholdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PersonToOppholdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToOppholdsadresseArgs {
    historikk?: boolean;
}
export interface PersonToOppholdsadresseResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToOppholdsadresseArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToSikkerhetstiltakResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToSivilstandArgs {
    historikk?: boolean;
}
export interface PersonToSivilstandResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToSivilstandArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToStatsborgerskapArgs {
    historikk?: boolean;
}
export interface PersonToStatsborgerskapResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToStatsborgerskapArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToTelefonnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToTilrettelagtKommunikasjonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToUtenlandskIdentifikasjonsnummerArgs {
    historikk?: boolean;
}
export interface PersonToUtenlandskIdentifikasjonsnummerResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToUtenlandskIdentifikasjonsnummerArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonToInnflyttingTilNorgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToUtflyttingFraNorgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToVergemaalEllerFremtidsfullmaktArgs {
    historikk?: boolean;
}
export interface PersonToVergemaalEllerFremtidsfullmaktResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonToVergemaalEllerFremtidsfullmaktArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface GQLAdressebeskyttelseTypeResolver<TParent = any> {
    gradering?: AdressebeskyttelseToGraderingResolver<TParent>;
    folkeregistermetadata?: AdressebeskyttelseToFolkeregistermetadataResolver<TParent>;
    metadata?: AdressebeskyttelseToMetadataResolver<TParent>;
}

export interface AdressebeskyttelseToGraderingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdressebeskyttelseToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdressebeskyttelseToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFolkeregistermetadataTypeResolver<TParent = any> {
    ajourholdstidspunkt?: FolkeregistermetadataToAjourholdstidspunktResolver<TParent>;
    gyldighetstidspunkt?: FolkeregistermetadataToGyldighetstidspunktResolver<TParent>;
    opphoerstidspunkt?: FolkeregistermetadataToOpphoerstidspunktResolver<TParent>;
    kilde?: FolkeregistermetadataToKildeResolver<TParent>;
    aarsak?: FolkeregistermetadataToAarsakResolver<TParent>;
    sekvens?: FolkeregistermetadataToSekvensResolver<TParent>;
}

export interface FolkeregistermetadataToAjourholdstidspunktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregistermetadataToGyldighetstidspunktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregistermetadataToOpphoerstidspunktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregistermetadataToKildeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregistermetadataToAarsakResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregistermetadataToSekvensResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMetadataTypeResolver<TParent = any> {
    opplysningsId?: MetadataToOpplysningsIdResolver<TParent>;
    master?: MetadataToMasterResolver<TParent>;
    endringer?: MetadataToEndringerResolver<TParent>;
    historisk?: MetadataToHistoriskResolver<TParent>;
}

export interface MetadataToOpplysningsIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MetadataToMasterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MetadataToEndringerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MetadataToHistoriskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEndringTypeResolver<TParent = any> {
    type?: EndringToTypeResolver<TParent>;
    registrert?: EndringToRegistrertResolver<TParent>;
    registrertAv?: EndringToRegistrertAvResolver<TParent>;
    systemkilde?: EndringToSystemkildeResolver<TParent>;
    kilde?: EndringToKildeResolver<TParent>;
}

export interface EndringToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EndringToRegistrertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EndringToRegistrertAvResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EndringToSystemkildeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EndringToKildeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBostedsadresseTypeResolver<TParent = any> {
    angittFlyttedato?: BostedsadresseToAngittFlyttedatoResolver<TParent>;
    gyldigFraOgMed?: BostedsadresseToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: BostedsadresseToGyldigTilOgMedResolver<TParent>;
    coAdressenavn?: BostedsadresseToCoAdressenavnResolver<TParent>;
    vegadresse?: BostedsadresseToVegadresseResolver<TParent>;
    matrikkeladresse?: BostedsadresseToMatrikkeladresseResolver<TParent>;
    utenlandskAdresse?: BostedsadresseToUtenlandskAdresseResolver<TParent>;
    ukjentBosted?: BostedsadresseToUkjentBostedResolver<TParent>;
    folkeregistermetadata?: BostedsadresseToFolkeregistermetadataResolver<TParent>;
    metadata?: BostedsadresseToMetadataResolver<TParent>;
}

export interface BostedsadresseToAngittFlyttedatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToCoAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToMatrikkeladresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToUtenlandskAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToUkjentBostedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BostedsadresseToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVegadresseTypeResolver<TParent = any> {
    matrikkelId?: VegadresseToMatrikkelIdResolver<TParent>;
    husnummer?: VegadresseToHusnummerResolver<TParent>;
    husbokstav?: VegadresseToHusbokstavResolver<TParent>;
    bruksenhetsnummer?: VegadresseToBruksenhetsnummerResolver<TParent>;
    adressenavn?: VegadresseToAdressenavnResolver<TParent>;
    kommunenummer?: VegadresseToKommunenummerResolver<TParent>;
    bydelsnummer?: VegadresseToBydelsnummerResolver<TParent>;
    tilleggsnavn?: VegadresseToTilleggsnavnResolver<TParent>;
    postnummer?: VegadresseToPostnummerResolver<TParent>;
    koordinater?: VegadresseToKoordinaterResolver<TParent>;
}

export interface VegadresseToMatrikkelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToHusnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToHusbokstavResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToBruksenhetsnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToKommunenummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToBydelsnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToTilleggsnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseToKoordinaterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKoordinaterTypeResolver<TParent = any> {
    x?: KoordinaterToXResolver<TParent>;
    y?: KoordinaterToYResolver<TParent>;
    z?: KoordinaterToZResolver<TParent>;
    kvalitet?: KoordinaterToKvalitetResolver<TParent>;
}

export interface KoordinaterToXResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KoordinaterToYResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KoordinaterToZResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KoordinaterToKvalitetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMatrikkeladresseTypeResolver<TParent = any> {
    matrikkelId?: MatrikkeladresseToMatrikkelIdResolver<TParent>;
    bruksenhetsnummer?: MatrikkeladresseToBruksenhetsnummerResolver<TParent>;
    tilleggsnavn?: MatrikkeladresseToTilleggsnavnResolver<TParent>;
    postnummer?: MatrikkeladresseToPostnummerResolver<TParent>;
    kommunenummer?: MatrikkeladresseToKommunenummerResolver<TParent>;
    koordinater?: MatrikkeladresseToKoordinaterResolver<TParent>;
}

export interface MatrikkeladresseToMatrikkelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseToBruksenhetsnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseToTilleggsnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseToKommunenummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseToKoordinaterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUtenlandskAdresseTypeResolver<TParent = any> {
    adressenavnNummer?: UtenlandskAdresseToAdressenavnNummerResolver<TParent>;
    bygningEtasjeLeilighet?: UtenlandskAdresseToBygningEtasjeLeilighetResolver<TParent>;
    postboksNummerNavn?: UtenlandskAdresseToPostboksNummerNavnResolver<TParent>;
    postkode?: UtenlandskAdresseToPostkodeResolver<TParent>;
    bySted?: UtenlandskAdresseToByStedResolver<TParent>;
    regionDistriktOmraade?: UtenlandskAdresseToRegionDistriktOmraadeResolver<TParent>;
    landkode?: UtenlandskAdresseToLandkodeResolver<TParent>;
}

export interface UtenlandskAdresseToAdressenavnNummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToBygningEtasjeLeilighetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToPostboksNummerNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToPostkodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToByStedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToRegionDistriktOmraadeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseToLandkodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUkjentBostedTypeResolver<TParent = any> {
    bostedskommune?: UkjentBostedToBostedskommuneResolver<TParent>;
}

export interface UkjentBostedToBostedskommuneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeltBostedTypeResolver<TParent = any> {
    startdatoForKontrakt?: DeltBostedToStartdatoForKontraktResolver<TParent>;
    sluttdatoForKontrakt?: DeltBostedToSluttdatoForKontraktResolver<TParent>;
    coAdressenavn?: DeltBostedToCoAdressenavnResolver<TParent>;
    vegadresse?: DeltBostedToVegadresseResolver<TParent>;
    matrikkeladresse?: DeltBostedToMatrikkeladresseResolver<TParent>;
    utenlandskAdresse?: DeltBostedToUtenlandskAdresseResolver<TParent>;
    ukjentBosted?: DeltBostedToUkjentBostedResolver<TParent>;
    folkeregistermetadata?: DeltBostedToFolkeregistermetadataResolver<TParent>;
    metadata?: DeltBostedToMetadataResolver<TParent>;
}

export interface DeltBostedToStartdatoForKontraktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToSluttdatoForKontraktResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToCoAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToMatrikkeladresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToUtenlandskAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToUkjentBostedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeltBostedToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDoedfoedtBarnTypeResolver<TParent = any> {
    dato?: DoedfoedtBarnToDatoResolver<TParent>;
    folkeregistermetadata?: DoedfoedtBarnToFolkeregistermetadataResolver<TParent>;
    metadata?: DoedfoedtBarnToMetadataResolver<TParent>;
}

export interface DoedfoedtBarnToDatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DoedfoedtBarnToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DoedfoedtBarnToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDoedsfallTypeResolver<TParent = any> {
    doedsdato?: DoedsfallToDoedsdatoResolver<TParent>;
    metadata?: DoedsfallToMetadataResolver<TParent>;
    folkeregistermetadata?: DoedsfallToFolkeregistermetadataResolver<TParent>;
}

export interface DoedsfallToDoedsdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DoedsfallToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DoedsfallToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFalskIdentitetTypeResolver<TParent = any> {
    erFalsk?: FalskIdentitetToErFalskResolver<TParent>;
    rettIdentitetVedIdentifikasjonsnummer?: FalskIdentitetToRettIdentitetVedIdentifikasjonsnummerResolver<
        TParent
    >;
    rettIdentitetErUkjent?: FalskIdentitetToRettIdentitetErUkjentResolver<TParent>;
    rettIdentitetVedOpplysninger?: FalskIdentitetToRettIdentitetVedOpplysningerResolver<TParent>;
    folkeregistermetadata?: FalskIdentitetToFolkeregistermetadataResolver<TParent>;
    metadata?: FalskIdentitetToMetadataResolver<TParent>;
}

export interface FalskIdentitetToErFalskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetToRettIdentitetVedIdentifikasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetToRettIdentitetErUkjentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetToRettIdentitetVedOpplysningerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFalskIdentitetIdentifiserendeInformasjonTypeResolver<TParent = any> {
    personnavn?: FalskIdentitetIdentifiserendeInformasjonToPersonnavnResolver<TParent>;
    foedselsdato?: FalskIdentitetIdentifiserendeInformasjonToFoedselsdatoResolver<TParent>;
    statsborgerskap?: FalskIdentitetIdentifiserendeInformasjonToStatsborgerskapResolver<TParent>;
    kjoenn?: FalskIdentitetIdentifiserendeInformasjonToKjoennResolver<TParent>;
}

export interface FalskIdentitetIdentifiserendeInformasjonToPersonnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetIdentifiserendeInformasjonToFoedselsdatoResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetIdentifiserendeInformasjonToStatsborgerskapResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FalskIdentitetIdentifiserendeInformasjonToKjoennResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonnavnTypeResolver<TParent = any> {
    fornavn?: PersonnavnToFornavnResolver<TParent>;
    mellomnavn?: PersonnavnToMellomnavnResolver<TParent>;
    etternavn?: PersonnavnToEtternavnResolver<TParent>;
}

export interface PersonnavnToFornavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonnavnToMellomnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonnavnToEtternavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFamilierelasjonTypeResolver<TParent = any> {
    relatertPersonsIdent?: FamilierelasjonToRelatertPersonsIdentResolver<TParent>;
    relatertPersonsRolle?: FamilierelasjonToRelatertPersonsRolleResolver<TParent>;
    minRolleForPerson?: FamilierelasjonToMinRolleForPersonResolver<TParent>;
    folkeregistermetadata?: FamilierelasjonToFolkeregistermetadataResolver<TParent>;
    metadata?: FamilierelasjonToMetadataResolver<TParent>;
}

export interface FamilierelasjonToRelatertPersonsIdentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FamilierelasjonToRelatertPersonsRolleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FamilierelasjonToMinRolleForPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FamilierelasjonToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FamilierelasjonToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFoedselTypeResolver<TParent = any> {
    foedselsaar?: FoedselToFoedselsaarResolver<TParent>;
    foedselsdato?: FoedselToFoedselsdatoResolver<TParent>;
    foedeland?: FoedselToFoedelandResolver<TParent>;
    foedested?: FoedselToFoedestedResolver<TParent>;
    foedekommune?: FoedselToFoedekommuneResolver<TParent>;
    folkeregistermetadata?: FoedselToFolkeregistermetadataResolver<TParent>;
    metadata?: FoedselToMetadataResolver<TParent>;
}

export interface FoedselToFoedselsaarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToFoedselsdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToFoedelandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToFoedestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToFoedekommuneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoedselToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFolkeregisteridentifikatorTypeResolver<TParent = any> {
    identifikasjonsnummer?: FolkeregisteridentifikatorToIdentifikasjonsnummerResolver<TParent>;
    status?: FolkeregisteridentifikatorToStatusResolver<TParent>;
    type?: FolkeregisteridentifikatorToTypeResolver<TParent>;
    folkeregistermetadata?: FolkeregisteridentifikatorToFolkeregistermetadataResolver<TParent>;
    metadata?: FolkeregisteridentifikatorToMetadataResolver<TParent>;
}

export interface FolkeregisteridentifikatorToIdentifikasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisteridentifikatorToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisteridentifikatorToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisteridentifikatorToFolkeregistermetadataResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisteridentifikatorToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFolkeregisterpersonstatusTypeResolver<TParent = any> {
    status?: FolkeregisterpersonstatusToStatusResolver<TParent>;
    forenkletStatus?: FolkeregisterpersonstatusToForenkletStatusResolver<TParent>;
    folkeregistermetadata?: FolkeregisterpersonstatusToFolkeregistermetadataResolver<TParent>;
    metadata?: FolkeregisterpersonstatusToMetadataResolver<TParent>;
}

export interface FolkeregisterpersonstatusToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisterpersonstatusToForenkletStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisterpersonstatusToFolkeregistermetadataResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolkeregisterpersonstatusToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLForelderBarnRelasjonTypeResolver<TParent = any> {
    relatertPersonsIdent?: ForelderBarnRelasjonToRelatertPersonsIdentResolver<TParent>;
    relatertPersonsRolle?: ForelderBarnRelasjonToRelatertPersonsRolleResolver<TParent>;
    minRolleForPerson?: ForelderBarnRelasjonToMinRolleForPersonResolver<TParent>;
    folkeregistermetadata?: ForelderBarnRelasjonToFolkeregistermetadataResolver<TParent>;
    metadata?: ForelderBarnRelasjonToMetadataResolver<TParent>;
}

export interface ForelderBarnRelasjonToRelatertPersonsIdentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForelderBarnRelasjonToRelatertPersonsRolleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForelderBarnRelasjonToMinRolleForPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForelderBarnRelasjonToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForelderBarnRelasjonToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLForeldreansvarTypeResolver<TParent = any> {
    ansvar?: ForeldreansvarToAnsvarResolver<TParent>;
    ansvarlig?: ForeldreansvarToAnsvarligResolver<TParent>;
    ansvarssubjekt?: ForeldreansvarToAnsvarssubjektResolver<TParent>;
    ansvarligUtenIdentifikator?: ForeldreansvarToAnsvarligUtenIdentifikatorResolver<TParent>;
    folkeregistermetadata?: ForeldreansvarToFolkeregistermetadataResolver<TParent>;
    metadata?: ForeldreansvarToMetadataResolver<TParent>;
}

export interface ForeldreansvarToAnsvarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForeldreansvarToAnsvarligResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForeldreansvarToAnsvarssubjektResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForeldreansvarToAnsvarligUtenIdentifikatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForeldreansvarToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ForeldreansvarToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRelatertBiPersonTypeResolver<TParent = any> {
    navn?: RelatertBiPersonToNavnResolver<TParent>;
    foedselsdato?: RelatertBiPersonToFoedselsdatoResolver<TParent>;
    statsborgerskap?: RelatertBiPersonToStatsborgerskapResolver<TParent>;
    kjoenn?: RelatertBiPersonToKjoennResolver<TParent>;
}

export interface RelatertBiPersonToNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelatertBiPersonToFoedselsdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelatertBiPersonToStatsborgerskapResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelatertBiPersonToKjoennResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFullmaktTypeResolver<TParent = any> {
    motpartsPersonident?: FullmaktToMotpartsPersonidentResolver<TParent>;
    motpartsRolle?: FullmaktToMotpartsRolleResolver<TParent>;
    omraader?: FullmaktToOmraaderResolver<TParent>;
    gyldigFraOgMed?: FullmaktToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: FullmaktToGyldigTilOgMedResolver<TParent>;
    metadata?: FullmaktToMetadataResolver<TParent>;
}

export interface FullmaktToMotpartsPersonidentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FullmaktToMotpartsRolleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FullmaktToOmraaderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FullmaktToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FullmaktToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FullmaktToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIdentitetsgrunnlagTypeResolver<TParent = any> {
    status?: IdentitetsgrunnlagToStatusResolver<TParent>;
    folkeregistermetadata?: IdentitetsgrunnlagToFolkeregistermetadataResolver<TParent>;
    metadata?: IdentitetsgrunnlagToMetadataResolver<TParent>;
}

export interface IdentitetsgrunnlagToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IdentitetsgrunnlagToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IdentitetsgrunnlagToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKjoennTypeResolver<TParent = any> {
    kjoenn?: KjoennToKjoennResolver<TParent>;
    folkeregistermetadata?: KjoennToFolkeregistermetadataResolver<TParent>;
    metadata?: KjoennToMetadataResolver<TParent>;
}

export interface KjoennToKjoennResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KjoennToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KjoennToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktadresseTypeResolver<TParent = any> {
    gyldigFraOgMed?: KontaktadresseToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: KontaktadresseToGyldigTilOgMedResolver<TParent>;
    type?: KontaktadresseToTypeResolver<TParent>;
    coAdressenavn?: KontaktadresseToCoAdressenavnResolver<TParent>;
    postboksadresse?: KontaktadresseToPostboksadresseResolver<TParent>;
    vegadresse?: KontaktadresseToVegadresseResolver<TParent>;
    postadresseIFrittFormat?: KontaktadresseToPostadresseIFrittFormatResolver<TParent>;
    utenlandskAdresse?: KontaktadresseToUtenlandskAdresseResolver<TParent>;
    utenlandskAdresseIFrittFormat?: KontaktadresseToUtenlandskAdresseIFrittFormatResolver<TParent>;
    folkeregistermetadata?: KontaktadresseToFolkeregistermetadataResolver<TParent>;
    metadata?: KontaktadresseToMetadataResolver<TParent>;
}

export interface KontaktadresseToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToCoAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToPostboksadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToPostadresseIFrittFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToUtenlandskAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToUtenlandskAdresseIFrittFormatResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktadresseToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostboksadresseTypeResolver<TParent = any> {
    postbokseier?: PostboksadresseToPostbokseierResolver<TParent>;
    postboks?: PostboksadresseToPostboksResolver<TParent>;
    postnummer?: PostboksadresseToPostnummerResolver<TParent>;
}

export interface PostboksadresseToPostbokseierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostboksadresseToPostboksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostboksadresseToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostadresseIFrittFormatTypeResolver<TParent = any> {
    adresselinje1?: PostadresseIFrittFormatToAdresselinje1Resolver<TParent>;
    adresselinje2?: PostadresseIFrittFormatToAdresselinje2Resolver<TParent>;
    adresselinje3?: PostadresseIFrittFormatToAdresselinje3Resolver<TParent>;
    postnummer?: PostadresseIFrittFormatToPostnummerResolver<TParent>;
}

export interface PostadresseIFrittFormatToAdresselinje1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostadresseIFrittFormatToAdresselinje2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostadresseIFrittFormatToAdresselinje3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostadresseIFrittFormatToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUtenlandskAdresseIFrittFormatTypeResolver<TParent = any> {
    adresselinje1?: UtenlandskAdresseIFrittFormatToAdresselinje1Resolver<TParent>;
    adresselinje2?: UtenlandskAdresseIFrittFormatToAdresselinje2Resolver<TParent>;
    adresselinje3?: UtenlandskAdresseIFrittFormatToAdresselinje3Resolver<TParent>;
    postkode?: UtenlandskAdresseIFrittFormatToPostkodeResolver<TParent>;
    byEllerStedsnavn?: UtenlandskAdresseIFrittFormatToByEllerStedsnavnResolver<TParent>;
    landkode?: UtenlandskAdresseIFrittFormatToLandkodeResolver<TParent>;
}

export interface UtenlandskAdresseIFrittFormatToAdresselinje1Resolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseIFrittFormatToAdresselinje2Resolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseIFrittFormatToAdresselinje3Resolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseIFrittFormatToPostkodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseIFrittFormatToByEllerStedsnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskAdresseIFrittFormatToLandkodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktinformasjonForDoedsboTypeResolver<TParent = any> {
    skifteform?: KontaktinformasjonForDoedsboToSkifteformResolver<TParent>;
    attestutstedelsesdato?: KontaktinformasjonForDoedsboToAttestutstedelsesdatoResolver<TParent>;
    personSomKontakt?: KontaktinformasjonForDoedsboToPersonSomKontaktResolver<TParent>;
    advokatSomKontakt?: KontaktinformasjonForDoedsboToAdvokatSomKontaktResolver<TParent>;
    organisasjonSomKontakt?: KontaktinformasjonForDoedsboToOrganisasjonSomKontaktResolver<TParent>;
    adresse?: KontaktinformasjonForDoedsboToAdresseResolver<TParent>;
    folkeregistermetadata?: KontaktinformasjonForDoedsboToFolkeregistermetadataResolver<TParent>;
    metadata?: KontaktinformasjonForDoedsboToMetadataResolver<TParent>;
}

export interface KontaktinformasjonForDoedsboToSkifteformResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToAttestutstedelsesdatoResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToPersonSomKontaktResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToAdvokatSomKontaktResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToOrganisasjonSomKontaktResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToFolkeregistermetadataResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktinformasjonForDoedsboPersonSomKontaktTypeResolver<TParent = any> {
    foedselsdato?: KontaktinformasjonForDoedsboPersonSomKontaktToFoedselsdatoResolver<TParent>;
    personnavn?: KontaktinformasjonForDoedsboPersonSomKontaktToPersonnavnResolver<TParent>;
    identifikasjonsnummer?: KontaktinformasjonForDoedsboPersonSomKontaktToIdentifikasjonsnummerResolver<
        TParent
    >;
}

export interface KontaktinformasjonForDoedsboPersonSomKontaktToFoedselsdatoResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboPersonSomKontaktToPersonnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboPersonSomKontaktToIdentifikasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktinformasjonForDoedsboAdvokatSomKontaktTypeResolver<TParent = any> {
    personnavn?: KontaktinformasjonForDoedsboAdvokatSomKontaktToPersonnavnResolver<TParent>;
    organisasjonsnavn?: KontaktinformasjonForDoedsboAdvokatSomKontaktToOrganisasjonsnavnResolver<
        TParent
    >;
    organisasjonsnummer?: KontaktinformasjonForDoedsboAdvokatSomKontaktToOrganisasjonsnummerResolver<
        TParent
    >;
}

export interface KontaktinformasjonForDoedsboAdvokatSomKontaktToPersonnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdvokatSomKontaktToOrganisasjonsnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdvokatSomKontaktToOrganisasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktinformasjonForDoedsboOrganisasjonSomKontaktTypeResolver<TParent = any> {
    kontaktperson?: KontaktinformasjonForDoedsboOrganisasjonSomKontaktToKontaktpersonResolver<
        TParent
    >;
    organisasjonsnavn?: KontaktinformasjonForDoedsboOrganisasjonSomKontaktToOrganisasjonsnavnResolver<
        TParent
    >;
    organisasjonsnummer?: KontaktinformasjonForDoedsboOrganisasjonSomKontaktToOrganisasjonsnummerResolver<
        TParent
    >;
}

export interface KontaktinformasjonForDoedsboOrganisasjonSomKontaktToKontaktpersonResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboOrganisasjonSomKontaktToOrganisasjonsnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboOrganisasjonSomKontaktToOrganisasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKontaktinformasjonForDoedsboAdresseTypeResolver<TParent = any> {
    adresselinje1?: KontaktinformasjonForDoedsboAdresseToAdresselinje1Resolver<TParent>;
    adresselinje2?: KontaktinformasjonForDoedsboAdresseToAdresselinje2Resolver<TParent>;
    poststedsnavn?: KontaktinformasjonForDoedsboAdresseToPoststedsnavnResolver<TParent>;
    postnummer?: KontaktinformasjonForDoedsboAdresseToPostnummerResolver<TParent>;
    landkode?: KontaktinformasjonForDoedsboAdresseToLandkodeResolver<TParent>;
}

export interface KontaktinformasjonForDoedsboAdresseToAdresselinje1Resolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdresseToAdresselinje2Resolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdresseToPoststedsnavnResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdresseToPostnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KontaktinformasjonForDoedsboAdresseToLandkodeResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNavnTypeResolver<TParent = any> {
    fornavn?: NavnToFornavnResolver<TParent>;
    mellomnavn?: NavnToMellomnavnResolver<TParent>;
    etternavn?: NavnToEtternavnResolver<TParent>;
    forkortetNavn?: NavnToForkortetNavnResolver<TParent>;
    originaltNavn?: NavnToOriginaltNavnResolver<TParent>;
    gyldigFraOgMed?: NavnToGyldigFraOgMedResolver<TParent>;
    folkeregistermetadata?: NavnToFolkeregistermetadataResolver<TParent>;
    metadata?: NavnToMetadataResolver<TParent>;
}

export interface NavnToFornavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToMellomnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToEtternavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToForkortetNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToOriginaltNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NavnToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOriginaltNavnTypeResolver<TParent = any> {
    fornavn?: OriginaltNavnToFornavnResolver<TParent>;
    mellomnavn?: OriginaltNavnToMellomnavnResolver<TParent>;
    etternavn?: OriginaltNavnToEtternavnResolver<TParent>;
}

export interface OriginaltNavnToFornavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OriginaltNavnToMellomnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OriginaltNavnToEtternavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOppholdTypeResolver<TParent = any> {
    type?: OppholdToTypeResolver<TParent>;
    oppholdFra?: OppholdToOppholdFraResolver<TParent>;
    oppholdTil?: OppholdToOppholdTilResolver<TParent>;
    folkeregistermetadata?: OppholdToFolkeregistermetadataResolver<TParent>;
    metadata?: OppholdToMetadataResolver<TParent>;
}

export interface OppholdToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdToOppholdFraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdToOppholdTilResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOppholdsadresseTypeResolver<TParent = any> {
    gyldigFraOgMed?: OppholdsadresseToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: OppholdsadresseToGyldigTilOgMedResolver<TParent>;
    coAdressenavn?: OppholdsadresseToCoAdressenavnResolver<TParent>;
    utenlandskAdresse?: OppholdsadresseToUtenlandskAdresseResolver<TParent>;
    vegadresse?: OppholdsadresseToVegadresseResolver<TParent>;
    matrikkeladresse?: OppholdsadresseToMatrikkeladresseResolver<TParent>;
    oppholdAnnetSted?: OppholdsadresseToOppholdAnnetStedResolver<TParent>;
    folkeregistermetadata?: OppholdsadresseToFolkeregistermetadataResolver<TParent>;
    metadata?: OppholdsadresseToMetadataResolver<TParent>;
}

export interface OppholdsadresseToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToCoAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToUtenlandskAdresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToMatrikkeladresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToOppholdAnnetStedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OppholdsadresseToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSikkerhetstiltakTypeResolver<TParent = any> {
    tiltakstype?: SikkerhetstiltakToTiltakstypeResolver<TParent>;
    beskrivelse?: SikkerhetstiltakToBeskrivelseResolver<TParent>;
    kontaktperson?: SikkerhetstiltakToKontaktpersonResolver<TParent>;
    gyldigFraOgMed?: SikkerhetstiltakToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: SikkerhetstiltakToGyldigTilOgMedResolver<TParent>;
    metadata?: SikkerhetstiltakToMetadataResolver<TParent>;
}

export interface SikkerhetstiltakToTiltakstypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakToBeskrivelseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakToKontaktpersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSikkerhetstiltakKontaktpersonTypeResolver<TParent = any> {
    personident?: SikkerhetstiltakKontaktpersonToPersonidentResolver<TParent>;
    enhet?: SikkerhetstiltakKontaktpersonToEnhetResolver<TParent>;
}

export interface SikkerhetstiltakKontaktpersonToPersonidentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SikkerhetstiltakKontaktpersonToEnhetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSivilstandTypeResolver<TParent = any> {
    type?: SivilstandToTypeResolver<TParent>;
    gyldigFraOgMed?: SivilstandToGyldigFraOgMedResolver<TParent>;
    relatertVedSivilstand?: SivilstandToRelatertVedSivilstandResolver<TParent>;
    bekreftelsesdato?: SivilstandToBekreftelsesdatoResolver<TParent>;
    folkeregistermetadata?: SivilstandToFolkeregistermetadataResolver<TParent>;
    metadata?: SivilstandToMetadataResolver<TParent>;
}

export interface SivilstandToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SivilstandToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SivilstandToRelatertVedSivilstandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SivilstandToBekreftelsesdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SivilstandToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SivilstandToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatsborgerskapTypeResolver<TParent = any> {
    land?: StatsborgerskapToLandResolver<TParent>;
    bekreftelsesdato?: StatsborgerskapToBekreftelsesdatoResolver<TParent>;
    gyldigFraOgMed?: StatsborgerskapToGyldigFraOgMedResolver<TParent>;
    gyldigTilOgMed?: StatsborgerskapToGyldigTilOgMedResolver<TParent>;
    folkeregistermetadata?: StatsborgerskapToFolkeregistermetadataResolver<TParent>;
    metadata?: StatsborgerskapToMetadataResolver<TParent>;
}

export interface StatsborgerskapToLandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatsborgerskapToBekreftelsesdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatsborgerskapToGyldigFraOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatsborgerskapToGyldigTilOgMedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatsborgerskapToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatsborgerskapToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTelefonnummerTypeResolver<TParent = any> {
    landskode?: TelefonnummerToLandskodeResolver<TParent>;
    nummer?: TelefonnummerToNummerResolver<TParent>;
    prioritet?: TelefonnummerToPrioritetResolver<TParent>;
    metadata?: TelefonnummerToMetadataResolver<TParent>;
}

export interface TelefonnummerToLandskodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TelefonnummerToNummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TelefonnummerToPrioritetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TelefonnummerToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTilrettelagtKommunikasjonTypeResolver<TParent = any> {
    talespraaktolk?: TilrettelagtKommunikasjonToTalespraaktolkResolver<TParent>;
    tegnspraaktolk?: TilrettelagtKommunikasjonToTegnspraaktolkResolver<TParent>;
    metadata?: TilrettelagtKommunikasjonToMetadataResolver<TParent>;
}

export interface TilrettelagtKommunikasjonToTalespraaktolkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TilrettelagtKommunikasjonToTegnspraaktolkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TilrettelagtKommunikasjonToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTolkTypeResolver<TParent = any> {
    spraak?: TolkToSpraakResolver<TParent>;
}

export interface TolkToSpraakResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUtenlandskIdentifikasjonsnummerTypeResolver<TParent = any> {
    identifikasjonsnummer?: UtenlandskIdentifikasjonsnummerToIdentifikasjonsnummerResolver<TParent>;
    utstederland?: UtenlandskIdentifikasjonsnummerToUtstederlandResolver<TParent>;
    opphoert?: UtenlandskIdentifikasjonsnummerToOpphoertResolver<TParent>;
    folkeregistermetadata?: UtenlandskIdentifikasjonsnummerToFolkeregistermetadataResolver<TParent>;
    metadata?: UtenlandskIdentifikasjonsnummerToMetadataResolver<TParent>;
}

export interface UtenlandskIdentifikasjonsnummerToIdentifikasjonsnummerResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskIdentifikasjonsnummerToUtstederlandResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskIdentifikasjonsnummerToOpphoertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskIdentifikasjonsnummerToFolkeregistermetadataResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtenlandskIdentifikasjonsnummerToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInnflyttingTilNorgeTypeResolver<TParent = any> {
    fraflyttingsland?: InnflyttingTilNorgeToFraflyttingslandResolver<TParent>;
    fraflyttingsstedIUtlandet?: InnflyttingTilNorgeToFraflyttingsstedIUtlandetResolver<TParent>;
    folkeregistermetadata?: InnflyttingTilNorgeToFolkeregistermetadataResolver<TParent>;
    metadata?: InnflyttingTilNorgeToMetadataResolver<TParent>;
}

export interface InnflyttingTilNorgeToFraflyttingslandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InnflyttingTilNorgeToFraflyttingsstedIUtlandetResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InnflyttingTilNorgeToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InnflyttingTilNorgeToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUtflyttingFraNorgeTypeResolver<TParent = any> {
    tilflyttingsland?: UtflyttingFraNorgeToTilflyttingslandResolver<TParent>;
    tilflyttingsstedIUtlandet?: UtflyttingFraNorgeToTilflyttingsstedIUtlandetResolver<TParent>;
    utflyttingsdato?: UtflyttingFraNorgeToUtflyttingsdatoResolver<TParent>;
    folkeregistermetadata?: UtflyttingFraNorgeToFolkeregistermetadataResolver<TParent>;
    metadata?: UtflyttingFraNorgeToMetadataResolver<TParent>;
}

export interface UtflyttingFraNorgeToTilflyttingslandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtflyttingFraNorgeToTilflyttingsstedIUtlandetResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtflyttingFraNorgeToUtflyttingsdatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtflyttingFraNorgeToFolkeregistermetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UtflyttingFraNorgeToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVergemaalEllerFremtidsfullmaktTypeResolver<TParent = any> {
    type?: VergemaalEllerFremtidsfullmaktToTypeResolver<TParent>;
    embete?: VergemaalEllerFremtidsfullmaktToEmbeteResolver<TParent>;
    vergeEllerFullmektig?: VergemaalEllerFremtidsfullmaktToVergeEllerFullmektigResolver<TParent>;
    folkeregistermetadata?: VergemaalEllerFremtidsfullmaktToFolkeregistermetadataResolver<TParent>;
    metadata?: VergemaalEllerFremtidsfullmaktToMetadataResolver<TParent>;
}

export interface VergemaalEllerFremtidsfullmaktToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergemaalEllerFremtidsfullmaktToEmbeteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergemaalEllerFremtidsfullmaktToVergeEllerFullmektigResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergemaalEllerFremtidsfullmaktToFolkeregistermetadataResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergemaalEllerFremtidsfullmaktToMetadataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVergeEllerFullmektigTypeResolver<TParent = any> {
    navn?: VergeEllerFullmektigToNavnResolver<TParent>;
    motpartsPersonident?: VergeEllerFullmektigToMotpartsPersonidentResolver<TParent>;
    omfang?: VergeEllerFullmektigToOmfangResolver<TParent>;
    omfangetErInnenPersonligOmraade?: VergeEllerFullmektigToOmfangetErInnenPersonligOmraadeResolver<
        TParent
    >;
}

export interface VergeEllerFullmektigToNavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergeEllerFullmektigToMotpartsPersonidentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergeEllerFullmektigToOmfangResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VergeEllerFullmektigToOmfangetErInnenPersonligOmraadeResolver<
    TParent = any,
    TResult = any
> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHentPersonBolkResultTypeResolver<TParent = any> {
    ident?: HentPersonBolkResultToIdentResolver<TParent>;
    person?: HentPersonBolkResultToPersonResolver<TParent>;
    code?: HentPersonBolkResultToCodeResolver<TParent>;
}

export interface HentPersonBolkResultToIdentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HentPersonBolkResultToPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HentPersonBolkResultToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIdentlisteTypeResolver<TParent = any> {
    identer?: IdentlisteToIdenterResolver<TParent>;
}

export interface IdentlisteToIdenterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIdentInformasjonTypeResolver<TParent = any> {
    ident?: IdentInformasjonToIdentResolver<TParent>;
    gruppe?: IdentInformasjonToGruppeResolver<TParent>;
    historisk?: IdentInformasjonToHistoriskResolver<TParent>;
}

export interface IdentInformasjonToIdentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IdentInformasjonToGruppeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IdentInformasjonToHistoriskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHentIdenterBolkResultTypeResolver<TParent = any> {
    ident?: HentIdenterBolkResultToIdentResolver<TParent>;
    identer?: HentIdenterBolkResultToIdenterResolver<TParent>;
    code?: HentIdenterBolkResultToCodeResolver<TParent>;
}

export interface HentIdenterBolkResultToIdentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HentIdenterBolkResultToIdenterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HentIdenterBolkResultToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGeografiskTilknytningTypeResolver<TParent = any> {
    gtType?: GeografiskTilknytningToGtTypeResolver<TParent>;
    gtKommune?: GeografiskTilknytningToGtKommuneResolver<TParent>;
    gtBydel?: GeografiskTilknytningToGtBydelResolver<TParent>;
    gtLand?: GeografiskTilknytningToGtLandResolver<TParent>;
    regel?: GeografiskTilknytningToRegelResolver<TParent>;
}

export interface GeografiskTilknytningToGtTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeografiskTilknytningToGtKommuneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeografiskTilknytningToGtBydelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeografiskTilknytningToGtLandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeografiskTilknytningToRegelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonSearchResultTypeResolver<TParent = any> {
    hits?: PersonSearchResultToHitsResolver<TParent>;
    pageNumber?: PersonSearchResultToPageNumberResolver<TParent>;
    totalPages?: PersonSearchResultToTotalPagesResolver<TParent>;
    totalHits?: PersonSearchResultToTotalHitsResolver<TParent>;
}

export interface PersonSearchResultToHitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchResultToPageNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchResultToTotalPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchResultToTotalHitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonSearchHitTypeResolver<TParent = any> {
    person?: PersonSearchHitToPersonResolver<TParent>;
    identer?: PersonSearchHitToIdenterResolver<TParent>;
    score?: PersonSearchHitToScoreResolver<TParent>;
    highlights?: PersonSearchHitToHighlightsResolver<TParent>;
}

export interface PersonSearchHitToPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchHitToIdenterArgs {
    historikk?: boolean;
}
export interface PersonSearchHitToIdenterResolver<TParent = any, TResult = any> {
    (
        parent: TParent,
        args: PersonSearchHitToIdenterArgs,
        context: any,
        info: GraphQLResolveInfo,
    ): TResult;
}

export interface PersonSearchHitToScoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchHitToHighlightsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonSearchHighlightTypeResolver<TParent = any> {
    opplysning?: PersonSearchHighlightToOpplysningResolver<TParent>;
    opplysningsId?: PersonSearchHighlightToOpplysningsIdResolver<TParent>;
    historisk?: PersonSearchHighlightToHistoriskResolver<TParent>;
    matches?: PersonSearchHighlightToMatchesResolver<TParent>;
}

export interface PersonSearchHighlightToOpplysningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchHighlightToOpplysningsIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchHighlightToHistoriskResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonSearchHighlightToMatchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchMatchTypeResolver<TParent = any> {
    field?: SearchMatchToFieldResolver<TParent>;
    type?: SearchMatchToTypeResolver<TParent>;
    fragments?: SearchMatchToFragmentsResolver<TParent>;
}

export interface SearchMatchToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchMatchToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchMatchToFragmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAdresseSearchResultTypeResolver<TParent = any> {
    hits?: AdresseSearchResultToHitsResolver<TParent>;
    pageNumber?: AdresseSearchResultToPageNumberResolver<TParent>;
    totalPages?: AdresseSearchResultToTotalPagesResolver<TParent>;
    totalHits?: AdresseSearchResultToTotalHitsResolver<TParent>;
}

export interface AdresseSearchResultToHitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseSearchResultToPageNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseSearchResultToTotalPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseSearchResultToTotalHitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAdresseSearchHitTypeResolver<TParent = any> {
    vegadresse?: AdresseSearchHitToVegadresseResolver<TParent>;
    matrikkeladresse?: AdresseSearchHitToMatrikkeladresseResolver<TParent>;
    score?: AdresseSearchHitToScoreResolver<TParent>;
}

export interface AdresseSearchHitToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseSearchHitToMatrikkeladresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseSearchHitToScoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVegadresseResultTypeResolver<TParent = any> {
    matrikkelId?: VegadresseResultToMatrikkelIdResolver<TParent>;
    husnummer?: VegadresseResultToHusnummerResolver<TParent>;
    husbokstav?: VegadresseResultToHusbokstavResolver<TParent>;
    adressenavn?: VegadresseResultToAdressenavnResolver<TParent>;
    adressekode?: VegadresseResultToAdressekodeResolver<TParent>;
    tilleggsnavn?: VegadresseResultToTilleggsnavnResolver<TParent>;
    fylkesnavn?: VegadresseResultToFylkesnavnResolver<TParent>;
    fylkesnummer?: VegadresseResultToFylkesnummerResolver<TParent>;
    kommunenavn?: VegadresseResultToKommunenavnResolver<TParent>;
    kommunenummer?: VegadresseResultToKommunenummerResolver<TParent>;
    postnummer?: VegadresseResultToPostnummerResolver<TParent>;
    poststed?: VegadresseResultToPoststedResolver<TParent>;
    bydelsnavn?: VegadresseResultToBydelsnavnResolver<TParent>;
    bydelsnummer?: VegadresseResultToBydelsnummerResolver<TParent>;
}

export interface VegadresseResultToMatrikkelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToHusnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToHusbokstavResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToAdressenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToAdressekodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToTilleggsnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToFylkesnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToFylkesnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToKommunenavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToKommunenummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToPoststedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToBydelsnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VegadresseResultToBydelsnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMatrikkeladresseResultTypeResolver<TParent = any> {
    matrikkelId?: MatrikkeladresseResultToMatrikkelIdResolver<TParent>;
    tilleggsnavn?: MatrikkeladresseResultToTilleggsnavnResolver<TParent>;
    kommunenummer?: MatrikkeladresseResultToKommunenummerResolver<TParent>;
    gaardsnummer?: MatrikkeladresseResultToGaardsnummerResolver<TParent>;
    bruksnummer?: MatrikkeladresseResultToBruksnummerResolver<TParent>;
    postnummer?: MatrikkeladresseResultToPostnummerResolver<TParent>;
    poststed?: MatrikkeladresseResultToPoststedResolver<TParent>;
}

export interface MatrikkeladresseResultToMatrikkelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToTilleggsnavnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToKommunenummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToGaardsnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToBruksnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToPostnummerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MatrikkeladresseResultToPoststedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAdresseCompletionResultTypeResolver<TParent = any> {
    suggestions?: AdresseCompletionResultToSuggestionsResolver<TParent>;
    addressFound?: AdresseCompletionResultToAddressFoundResolver<TParent>;
}

export interface AdresseCompletionResultToSuggestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdresseCompletionResultToAddressFoundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCompletionAdresseTypeResolver<TParent = any> {
    vegadresse?: CompletionAdresseToVegadresseResolver<TParent>;
    matrikkeladresse?: CompletionAdresseToMatrikkeladresseResolver<TParent>;
}

export interface CompletionAdresseToVegadresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompletionAdresseToMatrikkeladresseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
